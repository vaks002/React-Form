{"version":3,"sources":["components/Input/Input.js","axios-create.js","components/Create/CreateForm.js","components/edit/EditForm.js","components/Buttons.js","components/Tables/Tables.js","components/ViewForm/ViewForm.js","App.js","serviceWorker.js","index.js"],"names":["input","props","inputElement","inputClasses","Invalid","shouldValidate","touched","push","elementType","react_default","a","createElement","Object","assign","className","join","elementConfig","value","onChange","changed","instance","axios","create","baseURL","CreateFrom","state","createForm","firstname","type","placeholder","validation","required","minLength","maxLength","valid","lastname","email","mobileno","dob","shortBio","formIsValid","loading","checkValidity","rules","isValid","trim","length","submitHandler","event","preventDefault","_this","setState","formData","key","post","then","response","history","catch","error","inputChangedHandler","inputIdentifier","updatedCreateForm","objectSpread","updatedFormElement","target","_this2","this","formElementArray","id","config","form","onSubmit","map","formArray","Input_Input","Button","outline","color","disabled","style","textAlign","Component","put","match","params","newForm","get","res","keys","data","_this3","console","log","Buttons","NavLink","href","Tables","shortbio","onClick","clicked","delete","ViewForm","details","datainfo","deleteHandler","postId","err","updateHandler","postsId","fetchDetails","Table","hover","detail","components_Tables_Tables","App","isOpen","toggle","Switch","Route","exact","path","component","CreateForm","EditForm","Boolean","window","location","hostname","app","BrowserRouter","src_App_0","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7823e3b2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement']\r\n\r\n    if(props.Invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push('Invalid');\r\n    }\r\n\r\n    switch(props.elementType) {\r\n        case('input'):\r\n            inputElement = <input className={inputClasses.join(' ')} {...props.elementConfig}\r\n                                    value={props.value}\r\n                                    onChange={props.changed} />;\r\n            break;\r\n\r\n        case('textarea'):\r\n            inputElement = <textarea  className={inputClasses.join(' ')} {...props.elementConfig}\r\n                                    value={props.value}\r\n                                    onChange={props.changed} />;\r\n            break;\r\n\r\n        default:\r\n            inputElement = <input  className='InputElement' {...props.elementConfig}\r\n                                    value={props.value} />;\r\n    }\r\n\r\n    return (\r\n            // <label className='Label'>{props.label}</label>\r\n            <div className='Input'>\r\n                {inputElement} \r\n            </div>  \r\n    );\r\n}\r\n\r\nexport default input;","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n\tbaseURL: 'https://react-form-f72ea.firebaseio.com/'\r\n});\r\n\r\nexport default instance;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport Input from '../Input/Input';\r\nimport './CreateForm.css';\r\nimport axios from '../../axios-create';\r\n\r\nclass CreateFrom extends Component {\r\n\r\n    state = {\r\n        createForm: {\r\n            firstname: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'First Name'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 10\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            lastname: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Last Name'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 10\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Email'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 25\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            mobileno: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Mobile No.'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 15\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            dob: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'date',\r\n                        placeholder: 'DOB'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 10\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            shortBio: {\r\n                elementType: 'textarea',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'short description'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 100\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        loading: false\r\n    }\r\n\r\n    \r\n    checkValidity = (value, rules) => {\r\n        let isValid = true;\r\n\r\n        if(!rules) {\r\n            return true;\r\n        }\r\n\r\n        if(rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength  && isValid;\r\n        }\r\n\r\n        \r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength  && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState({loading: true});\r\n        const formData = {};\r\n        for(let key in this.state.createForm) {\r\n            formData[key] = this.state.createForm[key].value;\r\n        }\r\n\r\n        axios.post('/info.json', formData).then(response=>{\r\n            this.setState({loading: false});\r\n            this.props.history.push('/');\r\n        }).catch(error=>{\r\n            this.setState({loading: false});\r\n        });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedCreateForm = {\r\n            ...this.state.createForm\r\n        };\r\n\r\n        const updatedFormElement = {\r\n            ...updatedCreateForm[inputIdentifier]\r\n        };\r\n       \r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedCreateForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedCreateForm) {\r\n            formIsValid = updatedCreateForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({createForm: updatedCreateForm, formIsValid: formIsValid}); \r\n    }\r\n   \r\n   render() {\r\n        const formElementArray = [];\r\n        for(let key in this.state.createForm){\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.createForm[key]  \r\n            });\r\n        }\r\n\r\n        let form = (\r\n            <form onSubmit={this.submitHandler}>\r\n                {formElementArray.map(formArray => (\r\n                    <Input \r\n                           key={formArray.id}\r\n                        //    label={formArray.config.elementConfig.placeholder}\r\n                           elementType={formArray.config.elementType}\r\n                           elementConfig={formArray.config.elementConfig}\r\n                           value={formArray.config.value}\r\n                           Invalid={!formArray.config.valid}\r\n                           shouldValidate={formArray.config.validation}\r\n                           touched={formArray.config.touched}\r\n                           changed={(event) => this.inputChangedHandler(event, formArray.id)} />\r\n                ))} \r\n                    <Button outline color='primary' disabled={!this.state.formIsValid}>Submit Form</Button> \r\n               </form>\r\n        );\r\n\r\n        if (this.state.loading) {\r\n            form = <p>Your Details Is Posted</p>;\r\n         }\r\n       return (\r\n            <div className=\"ContactData\">\r\n                <h2 style={{textAlign: 'center'}}>Enter Your Details</h2>\r\n                {form} \r\n            </div>\r\n       );\r\n   }\r\n}\r\n\r\nexport default CreateFrom;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport Input from '../Input/Input';\r\nimport './EditForm.css';\r\nimport axios from '../../axios-create';\r\n\r\nclass CreateFrom extends Component {\r\n\r\n    state = {\r\n        createForm: {\r\n            firstname: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'First Name'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 10\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            lastname: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Last Name'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 3,\r\n                    maxLength: 10\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Email'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 25\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            mobileno: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'Mobile No.'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 10,\r\n                    maxLength: 15\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            dob: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                        type: 'date',\r\n                        placeholder: 'DOB'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 10\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            shortBio: {\r\n                elementType: 'textarea',\r\n                elementConfig: {\r\n                        type: 'text',\r\n                        placeholder: 'short description'\r\n                    },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 100\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        formIsValid: false,\r\n        loading: false\r\n    }\r\n\r\n    \r\n    checkValidity = (value, rules) => {\r\n        let isValid = true;\r\n\r\n        if(!rules) {\r\n            return true;\r\n        }\r\n\r\n        if(rules.required) {\r\n            isValid = value.trim() !== '' && isValid;\r\n        }\r\n\r\n        if(rules.minLength) {\r\n            isValid = value.length >= rules.minLength  && isValid;\r\n        }\r\n\r\n        \r\n        if(rules.maxLength) {\r\n            isValid = value.length <= rules.maxLength  && isValid;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    componentWillMount() {\r\n        const newForm = {\r\n            ...this.state.createForm\r\n        }\r\n        axios.get('./info/'+this.props.match.params[\"id\"]+'.json').then(res=>{\r\n           Object.keys(res.data).map((key) => {\r\n                newForm[key].value = res.data[key];\r\n            });\r\n            this.setState({createForm: newForm});\r\n        })\r\n    }\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState({loading: true});\r\n        const formData = {};\r\n        for(let key in this.state.createForm) {\r\n            formData[key] = this.state.createForm[key].value;\r\n        }\r\n\r\n        axios.put('/info/'+this.props.match.params[\"id\"]+'.json', formData).then(response=>{\r\n            this.setState({loading: false});\r\n            this.props.history.push('/viewform');\r\n        }).catch(error=>{\r\n            this.setState({loading: false});\r\n        });\r\n\r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        const updatedCreateForm = {\r\n            ...this.state.createForm\r\n        };\r\n\r\n        const updatedFormElement = {\r\n            ...updatedCreateForm[inputIdentifier]\r\n        };\r\n       \r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = this.checkValidity(updatedFormElement.value, updatedFormElement.validation);\r\n        updatedFormElement.touched = true;\r\n        updatedCreateForm[inputIdentifier] = updatedFormElement;\r\n\r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedCreateForm) {\r\n            formIsValid = updatedCreateForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({createForm: updatedCreateForm, formIsValid: formIsValid}); \r\n    }\r\n   \r\n   render() {\r\n        const formElementArray = [];\r\n        for(let key in this.state.createForm){\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.createForm[key]  \r\n            });\r\n        }\r\n        console.log(formElementArray);\r\n        let form = (\r\n            <form onSubmit={this.submitHandler}>\r\n                {formElementArray.map(formArray => (\r\n                    <Input \r\n                           key={formArray.id}\r\n                           elementType={formArray.config.elementType}\r\n                           elementConfig={formArray.config.elementConfig}\r\n                           value={formArray.config.value}\r\n                           Invalid={!formArray.config.valid}\r\n                           shouldValidate={formArray.config.validation}\r\n                           touched={formArray.config.touched}\r\n                           changed={(event) => this.inputChangedHandler(event, formArray.id)} />\r\n                ))} \r\n                    <Button outline color='primary' disabled={this.state.formIsValid}>Submit Form</Button> \r\n               </form>\r\n        );\r\n\r\n        if (this.state.loading) {\r\n            form = <p>Your Details Is Posted</p>;\r\n         }\r\n       return (\r\n            <div className=\"ContactData\">\r\n                <h2 style={{textAlign: 'center'}}>Enter Your Details</h2>\r\n                {form} \r\n            </div>\r\n       );\r\n   }\r\n}\r\n\r\nexport default CreateFrom;","import React, { Component } from 'react';\r\nimport { NavLink, Button } from 'reactstrap';\r\n\r\nclass Buttons extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"container App\">\r\n                <div className=\"Button1\">\r\n                    <NavLink href=\"/createform\">\r\n                        <Button outline color=\"primary\">Create Form</Button>\r\n                    </NavLink>\r\n                </div>\r\n                <div className=\"Button2\">\r\n                    <NavLink href=\"/viewform\">\r\n                        <Button outline color=\"danger\">View Form</Button>\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Buttons;","import React, { Component } from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nclass Tables extends Component {\r\n \r\n  render() {\r\n    return (\r\n        <tbody>\r\n          <tr>\r\n            <td>{this.props.firstname}</td>\r\n            <td>{this.props.lastname}</td>\r\n            <td>{this.props.email}</td>\r\n            <td>{this.props.mobileno}</td>\r\n            <td>{this.props.dob}</td>\r\n            <td>{this.props.shortbio}</td>\r\n            <td>\r\n              <Button outline color='primary' onClick={this.props.clicked}>Edit</Button>\r\n            </td>\r\n            <td>\r\n              <Button outline color='danger' onClick={this.props.delete}>Delete</Button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Tables;","import React, { Component } from 'react';\r\nimport axios from '../../axios-create';\r\nimport Tables from '../Tables/Tables';\r\nimport { Table } from 'reactstrap';\r\nimport Input from '../Input/Input';\r\n\r\n\r\nclass ViewForm extends Component {\r\n\r\n   state = {\r\n       details: [],\r\n       loading: true,\r\n       datainfo: []\r\n   }\r\n   \r\n   componentDidMount () {\r\n       axios.get('./info.json').then(res => {\r\n        const fetchDetails = []\r\n        for (let key in res.data) {\r\n            fetchDetails.push({\r\n                ...res.data[key],\r\n                 id: key});\r\n        }\r\n        this.setState({loading: false, details: fetchDetails});\r\n       }).catch(err => {\r\n           this.setState({loading: false});\r\n       });\r\n   }\r\n\r\n   deleteHandler =  postId => {\r\n       axios.delete('./info/'+postId+'.json').then(\r\n           res=>{\r\n              this.props.history.push('/');\r\n           }).catch(err => {\r\n               console.log(err);\r\n           })\r\n   }\r\n\r\n   updateHandler = postsId => {\r\n       axios.get('./info/'+postsId+'.json').then(res=>{\r\n            this.props.history.push('/editform/'+postsId)\r\n           });\r\n   }\r\n\r\n   render() {\r\n       return (\r\n           <div>\r\n               <Table hover>\r\n                 <thead>\r\n                    <tr>\r\n                        <th>FirstName</th>\r\n                        <th>LastName</th>\r\n                        <th>Email</th>\r\n                        <th>Mobile No.</th>\r\n                        <th>DOB</th>\r\n                        <th>Short Bio</th>\r\n                        <th>Edit</th>\r\n                        <th>Delete</th>\r\n                    </tr>\r\n                 </thead>\r\n                 {this.state.details.map(detail => (\r\n                      <Tables key={detail.id}\r\n                            firstname={detail.firstname}\r\n                            lastname={detail.lastname}\r\n                            email={detail.email}\r\n                            mobileno={detail.mobileno}\r\n                            dob={detail.dob}\r\n                            shortbio={detail.shortBio}\r\n                            delete = {() => this.deleteHandler(detail.id)}\r\n                            clicked = {() => this.updateHandler(detail.id)} />\r\n                  ))}\r\n                </Table>\r\n            </div>\r\n       );\r\n   }\r\n}\r\n\r\nexport default ViewForm;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Route, Switch} from 'react-router-dom';\r\nimport CreateForm from './components/Create/CreateForm';\r\nimport EditForm from './components/edit/EditForm';\r\nimport Buttons from './components/Buttons';\r\nimport ViewForm from './components/ViewForm/ViewForm';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n      isOpen: false\r\n    }\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <Switch>\r\n          <Route exact path='/' component={Buttons} />\r\n          <Route  path='/createform' component={CreateForm} />\r\n          <Route  path='/editform/:id' component={EditForm} />\r\n          <Route  path='/viewform' component={ViewForm}/>\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nconst app = (\r\n    <BrowserRouter>\r\n       <App />\r\n    </BrowserRouter>\r\n);\r\n\r\nReactDOM.render(app, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}